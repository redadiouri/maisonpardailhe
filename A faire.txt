🛡️ Prompt 1 — Sécuriser les sessions en production

Corrige le code Express pour sécuriser les sessions en production :

Ne plus utiliser le store par défaut (mémoire).

Mettre un store persistant (ex: connect-redis ou express-mysql-session).

Ajouter les options cookie :

cookie: {
  secure: true, // en prod (HTTPS)
  httpOnly: true,
  sameSite: 'lax',
  maxAge: 1000 * 60 * 60 // 1h
}


Activer rolling: true pour refresh la session active.

Exemple : mettre le store et les options dans app.use(session(...)).

Objectif : éviter la perte de session et protéger contre le vol de cookies.

🔐 Prompt 2 — Protéger les endpoints sensibles (auth)

Ajoute un rate limiter sur les routes sensibles comme /api/admin/login avec express-rate-limit.

Ex : 5 tentatives max par 15 minutes.

Optionnel : délai ou blocage temporaire après plusieurs échecs.

But : empêcher le brute-force sur le compte admin.

🧱 Prompt 3 — Hardening Express

Améliore la sécurité globale d’Express :

Ajoute helmet() pour les headers de sécurité.

Restreins le CORS en prod via une variable PROD_ALLOWED_ORIGINS (plutôt que tout autoriser).

Si tu utilises les sessions + cookies : mets une protection CSRF avec csurf.

Sinon, si t’es en JWT : assure-toi que l’Authorization header est bien vérifié.

But : bloquer les attaques XSS, CSRF, clickjacking, etc.

🧼 Prompt 4 — Validation et sanitation serveur

Mets en place une validation et sanitation côté serveur :

Utilise express-validator ou Joi pour vérifier les données entrantes (login, commande, etc.).

Nettoie les champs textuels (remove <script> et caractères dangereux).

But : éviter les injections et attaques XSS côté serveur, même si le front valide déjà.

🍪 Prompt 5 — Session cookie secure & SameSite

Mets à jour la config cookie dans express-session pour la prod :

cookie: {
  secure: true, // HTTPS obligatoire
  httpOnly: true,
  sameSite: 'lax'
}


Le but est de rendre les cookies invisibles côté client (pas d’accès JS) et protégés contre les vols de session via cross-site.

🔑 Prompt 6 — Stockage des secrets & .env.example

Vérifie la sécurité des variables d’environnement :

Ajoute un fichier .env.example pour documenter les variables nécessaires.

Assure-toi que .env est dans .gitignore.

Objectif : éviter toute fuite de secrets (API keys, DB passwords, etc.).

📧 Prompt 7 — Remplacer le stub d’email

Implémente un vrai système d’envoi d’emails :

Utilise nodemailer ou un service externe (SendGrid, Mailgun, etc.).

Gère les retries, les logs, et les options d’unsubscribe.

Attention à ne pas loguer les adresses email en clair.

Objectif : fiabiliser la communication avec les clients.

🧾 Prompt 8 — Logging & erreurs

Améliore le logging avec pino :

Mets des niveaux de logs différents (info, warn, error) selon l’environnement.

Configure une rotation/transport (ex : fichiers journaux ou Logstash).

Vérifie que rien ne logue des secrets sensibles.

But : garder une traçabilité sans exposer de données confidentielles.

🧪 Prompt 9 — Tests / CI

Mets en place une base de tests et CI :

Ajoute quelques tests unitaires (pour commande.js, routes, etc.).

Configure une CI (GitHub Actions) pour lancer les tests automatiquement.

Intègre ESLint + Prettier + scripts npm (npm run lint, npm run format).

Objectif : code plus propre et stable.

🗃️ Prompt 10 — Migration & backup DB

Ajoute un système de migration de base de données :

Utilise knex/migrate ou umzug (si t’es sur Sequelize).

Évite les scripts SQL manuels.

Prévois des backups réguliers.

But : gérer les changements de schéma proprement et éviter la perte de données.

⚡ Prompt 11 — Performance frontend

Optimise les performances du frontend :

Compresse les images (WebP, compression).

Ajoute width / height sur les balises <img> et active le lazy-loading.

Côté serveur, ajoute des headers Cache-Control pour les fichiers statiques.

Objectif : chargement plus rapide et score Lighthouse boosté.

♿ Prompt 12 — Accessibilité

Vérifie l’accessibilité :

Bon contraste texte/fond.

Labels et ordre de focus cohérents.

Ajouter des roles ARIA si besoin.

Objectif : rendre le site utilisable par tous, même sans souris.

🔍 Prompt 13 — SEO / Meta

Améliore le SEO :

Ajoute une meta description, des balises Open Graph, favicon, etc.

Garde l’attribut lang sur <html>.

Objectif : meilleure visibilité sur Google et partage stylé sur les réseaux.